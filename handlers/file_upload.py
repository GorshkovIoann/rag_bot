
import nltk
nltk.download('punkt_tab')
# handlers/file_upload.py

import logging
from pathlib import Path
from telegram import Update
from telegram.ext import ContextTypes
import utils.file_utils as fu
import utils.convert_utils as cu
import services.rag_service as rag
import utils.keyboards as kb

logger = logging.getLogger(__name__)

async def upload_txt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:
    1) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ awaiting_file
    2) –°–∫–∞—á–∏–≤–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    3) –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ —Ç–µ–∫—Å—Ç (txt/pdf/docx/jpg/png)
    4) –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ raw_texts –∫–∞–∫ .txt
    5) –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ RAG
    6) –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ö–æ–¥–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    """
    chat_id = update.effective_chat.id

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∂–¥—ë—Ç —Ñ–∞–π–ª
    if not context.user_data.get("awaiting_file"):
        await update.message.reply_text(
            "‚ùó –ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª¬ª.",
            reply_markup=kb.main_menu(),
        )
        return

    doc = update.message.document
    ext = doc.file_name.rsplit(".", 1)[-1].lower()
    logger.info("–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª %s (ext=%s, size=%d)", doc.file_name, ext, doc.file_size)

    # 2) –°–∫–∞—á–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    try:
        file_obj = await doc.get_file()
        data = await file_obj.download_as_bytearray()
        logger.debug("–°–∫–∞—á–∞–Ω–æ %d –±–∞–π—Ç", len(data))
    except Exception as e:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: %s", e, exc_info=True)
        await update.message.reply_text(
            "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=kb.main_menu(),
        )
        return

    # 3) –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç
    try:
        if ext == "txt":
            text = data.decode("utf-8", errors="ignore")
        elif ext == "pdf":
            logger.info("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF ‚Üí —Ç–µ–∫—Å—Ç")
            text = cu.pdf_to_text(data)
        elif ext == "docx":
            logger.info("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DOCX ‚Üí —Ç–µ–∫—Å—Ç")
            text = cu.docx_to_text(data)
        elif ext in {"jpg", "jpeg", "png"}:
            logger.info("OCR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Üí —Ç–µ–∫—Å—Ç")
            text = cu.image_to_text(data)
        else:
            logger.warning("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: .%s", ext)
            await update.message.reply_text(
                f"‚ùó –§–æ—Ä–º–∞—Ç *.{ext}* –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.",
                parse_mode="Markdown",
                reply_markup=kb.main_menu(),
            )
            return
        logger.debug(
            "–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): %r",
            text[:100].replace("\n", " ")
        )
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ %s: %s", ext, e, exc_info=True)
        await update.message.reply_text(
            "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç.",
            reply_markup=kb.main_menu(),
        )
        return

    # 4) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º doc_id –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ .txt
    doc_id = fu.next_doc_id(chat_id)
    try:
        raw_dir = fu.ensure_chat_dir(chat_id) / "raw_texts"
        base_name = Path(doc.file_name).stem
        txt_path = raw_dir / f"{doc_id}_{base_name}.txt"
        txt_path.write_text(text, encoding="utf-8")
        logger.info("–°–æ—Ö—Ä–∞–Ω—ë–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: %s", txt_path)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è .txt: %s", e, exc_info=True)
        await update.message.reply_text(
            "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞.",
            reply_markup=kb.main_menu(),
        )
        return

    # 5) –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    status = await update.message.reply_text(
        "‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥‚Ä¶",
        reply_markup=None
    )

    # 6) –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ RAG
    try:
        logger.info("upload_txt: calling process_text for doc_id=%d", doc_id)
        rag.process_text(chat_id, text, doc.file_name, doc_id)
        logger.info("upload_txt: process_text returned for doc_id=%d", doc_id)
    except Exception as e:
        logger.error("upload_txt: process_text error: %s", e, exc_info=True)
        await status.edit_text(
            "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=None
        )
        # –ü–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ–Ω—é
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.main_menu())
        return

    # 7) –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
    context.user_data.clear()
    context.user_data["doc_id"] = doc_id

    # 8) –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ ReplyKeyboardMarkup
    await status.edit_text(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç #{doc_id} –≥–æ—Ç–æ–≤ –∫ –≤–æ–ø—Ä–æ—Å–∞–º!")

    # 9) –ü–æ—Å—ã–ª–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å main_menu
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.main_menu()
    )
