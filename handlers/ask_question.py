# handlers/ask_question.py

from telegram import Update
from telegram.ext import ContextTypes
import services.rag_service as rag
import utils.keyboards as kb

async def handle_question(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –≤–æ–ø—Ä–æ—Å (–µ—Å–ª–∏ –æ–Ω –Ω–µ –∫–æ–º–∞–Ω–¥–∞) –∏ –æ—Ç–≤–µ—á–∞–µ—Ç.
    –¢–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–≥–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å doc_id: –µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å.
    """
    chat_id = update.effective_chat.id
    question = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–∞–ª ‚ùì ¬´–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å¬ª
    if not context.user_data.get("awaiting_question"):
        await update.message.reply_text(
            "‚ùì –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å¬ª.",
            reply_markup=kb.main_menu(),
        )
        return

    # –°–µ–π—á–∞—Å, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ awaiting_question, –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ doc_id —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    doc_id = context.user_data.get("doc_id")
    if doc_id is None:
        # –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        await update.message.reply_text(
            "‚ùó –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ üìö ¬´–ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã¬ª.",
            reply_markup=kb.main_menu(),
        )
        return

    # –í—Å—ë –≥–æ—Ç–æ–≤–æ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
    answer = rag.find_answer(chat_id, doc_id, question)

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è awaiting_question, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º doc_id
    context.user_data.pop("awaiting_question", None)

    await update.message.reply_text(
        answer,
        reply_markup=kb.main_menu(),
    )
